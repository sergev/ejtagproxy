#summary About ejtagproxy project.

EJTAGproxy is a utility for connecting GNU debugger to [http://www.microchip.com/en_US/family/32bit/ PIC32 microcontrollers] via JTAG or ICSP adapter. It implements a standard GDB remote serial protocol.  It also can be used with Eclipse, DDD, Insight or other compatible debuggers.

Supported adapters:
 * [http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&nodeId=1406&dDocName=en023805 Microchip PICkit2]
 * [http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&nodeId=1406&dDocName=en538340 Microchip PICkit3] with scripting firmware (use [http://ww1.microchip.com/downloads/en/DeviceDoc/PICkit3%20Programmer%20Application%20v3.10.zip Scripting Tool] to upgrade)
 * [http://www.olimex.com/dev/arm-usb-tiny.html Olimex ARM-USB-Tiny] JTAG adapter
 * [http://www.olimex.com/dev/arm-usb-tiny-h.html Olimex ARM-USB-Tiny-H] JTAG adapter
 * [https://www.olimex.com/Products/ARM/JTAG/ARM-USB-OCD-H/ Olimex ARM-USB-OCD-H] JTAG adapter
 * [https://www.olimex.com/Products/ARM/JTAG/ARM-USB-OCD-H/ Olimex MIPS-USB-OCD-H] JTAG adapter
 * [http://dangerousprototypes.com/docs/Bus_Blaster_v2_design_overview Bus Blaster v2] JTAG adapter from Dangerous Prototypes
 * [http://www.tincantools.com/product.php?productid=16134 Flyswatter] JTAG adapter from TinCanTools

|| [http://ejtagproxy.googlecode.com/svn/wiki/images/pickit2.png] || [http://ejtagproxy.googlecode.com/svn/wiki/images/pickit3.png] || [http://ejtagproxy.googlecode.com/svn/wiki/images/arm-usb-tiny.png] ||

Please report all bugs on [http://code.google.com/p/ejtagproxy/issues/list issue tracker].

= Download =
  * [http://ejtagproxy.googlecode.com/files/ejtagproxy-1.0.zip ejtagproxy-1.0.zip] (402 kb) - sources and Windows binary.

= Usage =
{{{
    ejtagproxy [options]
}}}

Options:
{{{
    -d, --daemon        run as daemon
    -p, --port=PORT     use the specified TCP port (default 2000)
    -D, --debug         output debug messages
}}}

To start a debug session:
  # Run ejtagproxy.
  # Attach a USB adapter to target board.
  # Run gdb and connect to the PIC32 target:
{{{
    set remote hardware-breakpoint-limit 6
    set remote hardware-watchpoint-limit 2
    target remote localhost:2000
}}}

When gdb session is closed, ejtagproxy disconnects from the target board. You can use other tools, like pic32prog, to update the target software and then start a new gdb session.  No need to restart ejtagproxy between sessions.  You can safely run it as a daemon.

Example of GDB session is presented [Demo_gdb_session here].

= Install =
To build on Linux or Mac OS X, run:
{{{
    cmake .
    make
    make install
}}}

In case you don't have cmake installed, you can use plain Unix makefile.
It might still need some modifications to adapt to your system:
{{{
    make -f make-unix
}}}

To build on Windows using MINGW compiler, run:
{{{
    gmake -f make-mingw
}}}

= Supported processors =
  * PIC32MX1xx/2xx family: mx110f016b, mx110f016c, mx110f016d, mx120f032b, mx120f032c, mx120f032d, mx130f064b, mx130f064c, mx130f064d, mx150f128b, mx150f128c, mx150f128d, mx210f016b, mx210f016c, mx210f016d, mx220f032b, mx220f032c, mx220f032d, mx230f064b, mx230f064c, mx230f064d, mx250f128b, mx250f128c, mx250f128d
  * PIC32MX3xx/4xx family: mx320f032h, mx320f064h, mx320f128h, mx320f128l, mx340f128h, mx340f128l, mx340f256h, mx340f512h, mx360f256l, mx360f512l, mx420f032h, mx440f128h, mx440f128l, mx440f256h, mx440f512h, mx460f256l, mx460f512l
  * PIC32MX5xx/6xx/7xx family: mx534f064h, mx534f064l, mx564f064h, mx564f064l, mx564f128h, mx564f128l, mx575f256h, mx575f256l, mx575f512h, mx575f512l, mx664f064h, mx664f064l, mx664f128h, mx664f128l, mx675f256h, mx675f256l, mx675f512h, mx675f512l, mx695f512h, mx695f512l, mx764f128h, mx764f128l, mx775f256h, mx775f256l, mx775f512h, mx775f512l, mx795f512h, mx795f512l

= History =
The utility is based on sources of:
 * [http://gdbproxy.sourceforge.net/ GDBproxy] project by Steve Underwood
 * [http://code.google.com/p/mcprog/ MCprog, MCremote], [http://code.google.com/p/milprog/ MILprog] and [http://code.google.com/p/pic32prog/ PIC32prog] projects by Serge Vakulenko